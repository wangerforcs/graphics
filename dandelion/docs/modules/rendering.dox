/*!
\~english
\defgroup rendering Offline Rendering

\~chinese
\defgroup rendering 离线渲染
\brief 针对与渲染相关的实验，Dandelion 提供由 CPU 进行软渲染的功能。

虽然运行在 GPU 上的着色器语言 (shading language) 适合高效渲染，但由于 GPU 编程和 CPU 编程差异不小，单独讲授着色器语言会导致实验内容比较分裂。为了让同学更专注于光照、着色两类重要的渲染模型，我们统一使用软渲染的方式实现了两种渲染方法：

- 只考虑局部光照的 Blinn-Phong 光照模型。
- 在每个片元 (Fragment) 上仍然使用 Blinn-Phong 模型来着色，但用全局光照生成镜面反射和阴影效果的 Whitted-Style 光线追踪。

进行一次渲染需要三个要素：

- 物体：若干个 `Object` 对象。
- 光源：加入 `Light` 对象并设置位置和光照强度。
- 相机：加入 `Camera` 对象并设置位置、朝向、视角大小、近平面和远平面。

这些要素都被包含于一个 `Scene` 对象中。渲染器应当提供一个 `render` 方法，接受一个 `Scene&` 类型的输入，按相机指定的视角，遍历场景中的物体和光源进行渲染。渲染结果应当写入到一个总长为图片宽度 \f$\times\f$ 图片高度 \f$\times\f$ 颜色通道数的 **一维数组** 中。这个一维数组应该是行优先的，可以被外界直接访问。
*/
